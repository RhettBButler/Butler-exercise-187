package edu.cpt187.Butler.ParticipationExercise7;

//AUTHOR: Rhett Brooks Butler
//COURSE: CPT187
//PURPOSE: To design a sod buying program with multiple supportive classes
//STARTDATE: December 4th, 2019
//FILENAME: SodNotZod

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

public class Inventory 
{
	private final static String[] DISCOUNT_NAMES =  {"Member", "Senior",  "No Discount"};
	private final static double[] DISCOUNT_RATES =  {0.25, 0.15, 0.0};
	private final static String[] PRIZE_NAMES    = {"Coupon", "Gift Card", "Free Installation of Sod"};
	
	private final static int MAX_ITEMS   = 5;
	private final int NOT_FOUND   = -1;
	private final int RESET_VALUE = 0;
	
	private int[]    itemIDs       = new int [MAX_ITEMS];
	private String[] itemNames     = new String [MAX_ITEMS];
	private double[] itemPrices    = new double [MAX_ITEMS];
	private int[]    orderQuantity = new int [MAX_ITEMS];
	private double[] orderTotal    = new double [MAX_ITEMS];
	private static int[]    inStockCounts = new int [MAX_ITEMS];
	
	private int itemSearchIndex   = 0;
	private int recordCount       = 0;
	
	private Random prizeGenerator = new Random();
	
	
	public Inventory()
	{
		
	}
	
	public static void setReduceStock(Inventory currentInventory)
	{
		
	}
	
	public void setLoadItems(String borrowedFileName)
	{
		recordCount = RESET_VALUE;
		
		try
		{   
			Scanner infile = new Scanner (new FileInputStream(borrowedFileName));       
			
			while(infile.hasNext() == true && recordCount < MAX_ITEMS) 
			{
				itemIDs[recordCount] = infile.nextInt();        
				itemNames[recordCount] = infile.next(); 
				itemPrices[recordCount] = infile.nextDouble();
				recordCount++;
			}
		
		infile.close(); 
		setBubbleSort();
		
		}
		
				catch(IOException ex)  
				{  
					recordCount = NOT_FOUND;    
				} 
		
	}
	
	public void setLoadItems(String borrowedFileName, int borrowedSize)
	{
		
	}
	
	public void setSearchIndex(int borrowedID)
	{
		itemSearchIndex = getSearchResults(borrowedID);
	}
	
	public void setBubbleSort()
	{
		int last = recordCount - 1;
		
		while(last > RESET_VALUE)
		{
			int index = 0;
			boolean swap = false;
			
			while(index < last)
			{
				if(itemIDs[index] >  itemIDs[index + 1])
				{
					swap = true;
					index++;
				}
				else if (swap == false) 
				{
					last = RESET_VALUE;
				}
				else
				{
					last = last - 1;
				}
			}
		}
	}
	
	public static int[] getInStockCounts()
	{
		return inStockCounts;
	}
	
	public int[] getItemIDs()
	{
		return itemIDs;
	}
	
	public String[] getItemNames()
	{
		return itemNames;
	}
	
	public double[] getItemPrices()
	{
		return itemPrices;
	}
	
	public String[] getDiscountNames()
	{
		return DISCOUNT_NAMES;
	}

	public double[] getDiscountRates()
	{
		return DISCOUNT_RATES;
	}
	
	public int[] getOrderQuantity()
	{
		return orderQuantity;
	}

	public double[] getOrderTotal()
	{
		return orderTotal;
	}
	
	public String[] getPrizeNames()
	{
		return PRIZE_NAMES;
	}
	
	public int getRandomNumber()
	{
		return prizeGenerator.nextInt(PRIZE_NAMES.length);
	}
	
	public int getSearchIndex()
	{
		return itemSearchIndex;
	}
	
	public int getRecordCount()
	{
		return recordCount;
	}
	
	public int getSearchResults(int borrowedBorrowedID)
	{
		int first = 0;
		int last = recordCount -1;
		boolean found = false;
		int mid = 0;
		
		while(first <= last && found == false)
		{
			mid = (first + last) /2;
			
			if(itemIDs[mid] == itemIDs[borrowedBorrowedID])
			{
				found = true;
			}
			else if(itemIDs[mid] < itemIDs[borrowedBorrowedID])
			{
				first = mid + 1;
			}
			else
			{
				last = mid - 1;
			}
		}
		
		if(found == false)
		{
			mid = NOT_FOUND;
		}
		
		return mid;
	}
	
	
}
